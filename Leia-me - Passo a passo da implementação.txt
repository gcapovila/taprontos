
PASSOS EXECUTADOS:

Usando como exemplo os exercícios referentes às aulas 5 e 7 da matéria de Node:
  Links:
    https://1drv.ms/f/s!Aozio5w0IcPigcYGbRZNzzNljX80JA?e=PsRxdc - Exercício aula 5
    https://1drv.ms/f/s!Aozio5w0IcPigdAAuJ68VMLZKJ15jg?e=247vj8 - Exercício aula 7

1 - Criado arquivo server.js, onde sobe o servidor e tem o "use" que redireciona entre as APIs e as páginas

2 - Criado o banco de dados sqlite3 com integração com o knex na pasta "migrations"
  Criada a tabela de pedidos com seus campos
  
3 - Criadas as APIs de todas as operações de CRUD dentro da pasta "routes"
  No server.js, tem uma rota "/api" que redireciona para o arquivo "routeAPI.js" dentro da pasta "routes"

--------------------------------------------------------------

Usando como exemplo o trabalho final da matéria de Node:
    Link:
      https://replit.com/@danielepd2017/Alunos

4 - Criadas as páginas html na pasta "pages"
  No server.js, a rota padrão "/" é a página inicial, e redireciona para o "index.html" dentro da pasta "pages"
  No server,js, tem um mapeamenteo pada cada página html presente na pasta "pages"

5 - Criado o script das páginas html dentro da pasta "pages"
  Script criado seguindo como base o trabalho final de Node
    Conforme link acima, que aponta para um repl.it
  Arquivo "script.js"
  Todas as funções chamadas em todos os botões (e onload) das páginas estão dentro deste arquivo

--------------------------------------------------------------

6 - Ainda no "script.js", criada uma função para gerar uma senha aleatoriamente
  Na tela de incluir pedido, ao clicar no botão "Gerar senha", esta função é chamada

7 - Criado o arquivo temporário do CSS das páginas na pasta "pages"
  A formatação está bem simples por enquanto
  Após concluir a formatação usando bootstrap ou materialize talvez possamos excluir o styles.css

8 - A pasta "views" por enquanto não está sendo usada
  Nas matérias anteriores, ela era usada para criar templates de páginas
  Caso não seja usada podemos excluir
  
--------------------------------------------------------------

9 - Criada nova pipeline no GitHub Actions, seguindo como exemplo todo o material da aula de Cloud
  Link do repositório GIT:
    https://github.com/gcapovila/taprontos

10 - Criado documento no Google Docs com o passo a passo e prints da criação da pipeline
  Link:
    https://docs.google.com/document/d/13EscEVrpzBe2isEjf4Y-Cd3uE9nJDA5vyptg3sy2KA8/edit

--------------------------------------------------------------

11 - Criada a página mostra_qrCode.html, a qual o atendente poderá exibir para o cliente o QR Code da rota de acompanhar pedido. O cliente poderá acessar o site pelo próprio celular

12 - Feito ajustes visuais nas páginas, formatando estilo utilizando framework Bootstrap

13 - Criados os arquivos busca_senha.html e scriptBuscaSenha.js. A página html é o link do QR Code. Ao acessar, o cliente poderá inserir sua senha e verificar o status do pedido. 
O sistema armazena a senha no localstorage.
Ao buscar pela senha, o cliente é redirecionado da página busca_senha.html para a página aguarda_senha.html
A página aguarda_senha.html está associada ao arquivo scriptAguardaSenha, que possui a chamada para um get que retorna os dados com base na senha passada.

14 - Implementada função para que a página aguarda_senha.html seja atualizada a cada 5 segundos, trazendo o status do pedido

15 - Criado sistema de alerta sonoro para quando o pedido ficar pronto

--------------------------------------------------------------

Itens "Em progresso" da planilha de requisitos:
  Pipeline - tarefas de build e deploy - OK
  Configurações como variáveis de ambiente - OK
  Registro de eventos (logs) - OK
  Automação de testes - OK
  Recurso especial tecnológico (Captcha) - OK
  CRUD para os usuários atendentes (login)

16 - Criado arquivo ".env" para armazenar as variáveis de ambiente
  Fonte:
    https://www.freecodecamp.org/portuguese/news/como-usar-variaveis-de-ambiente-do-node-com-um-arquivo-dotenv-para-node-js-e-npm/
    https://edmilton-vinicius.medium.com/vari%C3%A1veis-de-ambiente-no-node-js-com-env-7a8fa963f9b7
  Instalado o dotenv utilizando o comando "npm install dotenv"
  Criadas, no arquivo, as variáveis "PORT" (com valor 3000) e "LOCAL_HOST" (com valor '127.0.0.1')
  Alterado o arquivo "server.js" para chamar essas variáveis

17 - Criado o arquivo "logger.js", com código responsável por salvar os logs no arquivo "logs/registro_eventos.log"
  Fonte:
    https://celke.com.br/artigo/como-criar-log-com-nodejs
    https://stackoverflow.com/questions/10271373/node-js-how-to-add-timestamp-to-logs-using-winston-library
  Instalado o módulo Winston (gerenciador de logs): "npm install --save winston"
  Importado o logger no início do arquivo routerAPI.js
  Em cada uma das rotas (get, post, put, patch, delete), incluído comando para registrar no log a ação

18 - Implementados testes unitários de cada um dos endpoints (CRUD) da API
  Fontes:
      Aulas da matéria de Qualidade de Software
      https://dev.to/nedsoft/testing-nodejs-express-api-with-jest-and-supertest-1km6
  Instalado o jest (módulo para testes automatizados): "npm install --save-dev jest supertest"
  Alterado package.json, inserindo script de testes com jest
      Foi necessário colocar o comando "--forceExit" pois o jest ficava executando "eternamente"
      "test": "jest --forceExit"
  Criado diretório "tests", e dentro dele, o arquivo "testesUnitarios.spec.js", que vai conter os cenários
  Criados os seguintes cenários de testes (seguindo exemplos da aula e outras buscas em fóruns de perguntas na internet):
      Criar pedido (POST)
      GET geral
      GET passando id
      GET passando senha
      Alterar o status (usando PATCH)
      Alterar o pedido completo (PUT)
      Excluir pedido (DELETE)
  "npm test" para rodar os testes automatizados (o servidor NÃO PODE ESTAR RODANDO, pois o jest vai iniciá-lo)

--------------------------------------------------------------

19 - Criado um novo servidor (pois a hospedagem no Repl.it não é mais gratiuta)
  Utilizada a plataforma Render, que também tem integração direta com o GitHub
  Fonte:
      https://dev.to/zipy/best-node-js-free-hosting-services-out-there-29kc
      (Somente o item 1, que é sobre o Render)
  Nova URL da aplicação:
    https://taprontos.onrender.com/

20 - Criado job para executar o deploy no servidor Render
  Fonte:
      https://github.com/marketplace/actions/deploy-to-render
      https://github.com/marketplace/actions/render-deploy-action  
  Acessadas as configurações do servidor criado no Render, e copiado o ID dele:
      srv-cpdlvrfsc6pc739415n0
  Acessada a configuração da conta do Render e gerada uma chave para acessá-lo:
      rnd_wn1N1bgpCQCq5oQaDLXaPJIx9jaA
  Inseridos estes valores como "secrets" --> "Repository secrets" nas configurações do GitHub
  Criado Job "Deploy-on-Cloud" na pipeline

21 - Realizados ajustes na Pipeline do GitHub Actions
  Fonte:
      Aulas da matéria EAD "Cultura e Práticas Devops"
      https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
  Renomeados e reorganizados os jobs existentes
  Criado job para executar os testes automatizados em jest

--------------------------------------------------------------

22 - Funcionalidade de Login
  Criada tela de Login
  Criada a tabela de usuários no arquivo das migrations
  Criado endpoint GET no routerAPI, para buscar usuário a partir de seu e-mail
  Validação na tela para se o usuário não estiver logado, apresentar uma mensagem solicitanto que faça o login

23 - Implementação de reCAPTCHA na tela de Login
  Fonte:
      https://www.rafaelwendel.com/2021/08/como-inserir-um-google-recaptcha-no-seu-site/      
      https://acervolima.com/como-verificar-o-recaptcha-na-chamada-do-servidor-node-js/
      https://pt.stackoverflow.com/questions/59952/como-implementar-recaptcha-do-google-no-meu-site
      https://pankaj-kumar.medium.com/implementing-google-recaptcha-in-node-js-application-a2133a5deab7
  Captcha gerado:
      https://www.google.com/recaptcha/admin/site/704276605/settings
      Chave de site: 6Ld9aPopAAAAAAaoccqGuSTXstpM0MBbT9lZkXGQ
      Chave secreta: 6Ld9aPopAAAAAFSYljfDjLInUBIaDhW6J0zGb3R-
  No routerAPI, foi criada a rota /api/captcha/, que vai receber como parâmetro o token e fazer a validação na API do Google
  Na página de login, realizado import do script do Google com a API do Captcha
    Incluído o elemento class="g-recaptcha" ao fim da página
  No scriptLogin.js, na função validaLogin, foi acrescentada a chamada à rota /api/captcha/
    É obtido da tela o token gerado no momento que o usuário valida o captcha, e esse token é passado para a rota
    A rota, por sua vez, chama a API do Google que verifica se o token passado é valido
    A rota responde sucesso para a função, que redireciona para a página inicial da tela após login

--------------------------------------------------------------

PRÓXIMOS PASSOS:

1 - Criar funcionalidade de mensagem - vamos criar mesmo?
2 - Remover campo "Itens do pedido" - o campo foi transformado em opcional - vamos remover completamente?
